[{"content":"Introduction calculate matrix inverse programmingly.\nSource code ( Python ) UPDATE LATER IN A DAY.\npython Output ","description":"calculate matrix inverse programmingly.","id":1,"section":"posts","tags":null,"title":"Matrix inverse in programming","uri":"https://touexe.com/posts/matrix_inverse_in_programming/"},{"content":"Introduction calculate matrix determinant programmingly.\nSource code ( Python ) UPDATE LATER IN A DAY\npython Output ","description":"calculate matrix determinant programmingly.","id":2,"section":"posts","tags":null,"title":"Matrix determinant in programming","uri":"https://touexe.com/posts/matrix_determinant_in_programming/"},{"content":"Introduction calculate matrix using Guassian Elimination programmingly.\nSource code ( Python ) UPDATE LATER IN A DAY.\npython Output ","description":"calculate any matrix size using Guassian Elimination programmingly.","id":3,"section":"posts","tags":null,"title":"Guassian elimination in programming","uri":"https://touexe.com/posts/guassian_elimination_in_programming/"},{"content":"Introduction Calculate simultaneous equations using Iteration method such as Jacobi\u0026rsquo;s method and Guass-Seidel\u0026rsquo;s method programmingly.\nSource code ( Python ) python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def guass_seidel(n : int) -\u0026gt; list[tuple]: x = 0 y = 0 z = 0 result = [] for _ in range(1,n + 1): x = ((1 / 8) * y ) + ((1 / 8) * z ) - (1 / 8) y = ((1 / 5) * x) + ((1 / 5) * z ) - (16 /5) _z = ((1 / 4) * x) + ((1 / 4) * y ) - (7 /4) result.append((x, y,_z)) z = _z return result def jacobi(n : int) -\u0026gt; list[tuple]: x = 0 y = 0 z = 0 result = [] for _ in range(1,n+1): _x = ((1 / 8) * y ) + ((1 / 8) * z ) - (1 / 8) _y = ((1 / 5) * x) + ((1 / 5) * z ) - (16 /5) _z = ((1 / 4) * x) + ((1 / 4) * y ) - (7 /4) result.append((_x, _y,_z)) x = _x y = _y z = _z return result def main(): n = 9 guass_seidel_result = guass_seidel(n) print(\u0026#34;[+] Result produced by Guass-Seidel\u0026#39;s Method\\n\u0026#34;) for x, y, z in guass_seidel_result: print(f\u0026#34;{x: \u0026lt;20} {y: ^20} {z: \u0026gt;20}\u0026#34;) print(\u0026#34;\\n[+] Result produced by Jacobi\u0026#39;s Method\\n\u0026#34;) jacobi_result = jacobi(n) for x, y, z in jacobi_result: print(f\u0026#34;{x: \u0026lt;20} {y: ^20} {z: \u0026gt;20}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() Output [+] Result produced by Guass-Seidel\u0026rsquo;s Method\n-0.125 -3.225 -2.5875\n-0.8515625 -3.8878125 -2.9348437499999998\n-0.97783203125 -3.98253515625 -2.9900917968750003\n-0.996578369140625 -3.997334033203125 -2.9984781005859373\n-0.9994765167236328 -3.9995909234619145 -2.9997668600463867\n-0.9999197229385377 -3.999937316596985 -2.999964259883881\n-0.9999876970601083 -3.999990391388798 -2.9999945221122264\n-0.9999981141876281 -3.999998527259971 -2.9999991603618996\n-0.9999997109527339 -3.999999774262927 -2.999999871303915\n[+] Result produced by Jacobi\u0026rsquo;s Method\n-0.125 -3.2 -1.75\n-0.74375 -3.575 -2.58125\n-0.89453125 -3.865 -2.8296875000000004\n-0.9618359375000001 -3.9448437500000004 -2.9398828125\n-0.9855908203125001 -3.9803437500000003 -2.976669921875\n-0.994626708984375 -3.9924521484375 -2.991483642578125\n-0.9979919738769532 -3.9972220703125 -2.9967697143554686\n-0.9992489730834961 -3.9989523376464846 -2.998803511047363\n-0.9997194810867309 -3.999610496826172 -2.999550327682495\n","description":"Calculate simultaneous equations using Iteration method such as Jacobi's method and Guass-Seidel's method programmingly.","id":4,"section":"posts","tags":null,"title":"Iteration method in programming","uri":"https://touexe.com/posts/iteration_method_in_programming/"},{"content":"Introduction Write a program to calcuate the area under curve using trapezoidal rule from given a data in spreadsheet xlxs format.\nDownload file : AUC_data.xlsx\nSource code (Golang, Python) Place the file in the same directory (folder) as the program\nInstall needed library\nGolang : go get github.com/xuri/excelize/v2 Python : pip install openpyxl Read data from file containg the AUC data then load the data into array ( list in python and slice in golang ) of tuple in Python or struct in Golang and sort out the header during the process.\nUse for-loop to interate through organize data and calculate the AUC data. Retrieve total AUC data at the end.\nBuild or Run the program.\n1 go run \u0026lt;yourfilename\u0026gt;.go 1 python \u0026lt;yourfilename\u0026gt;.py golang python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;github.com/xuri/excelize/v2\u0026#34; ) type data struct { x float64 y float64 } func loadXLXSdata(filepath string) []data { var Rowsdata []data f, FileErr := excelize.OpenFile(filepath) if FileErr != nil { fmt.Println(FileErr) } rows, err := f.GetRows(\u0026#34;Sheet1\u0026#34;) if err != nil { fmt.Println(err) } for _, row := range rows { column1 := row[0] column2 := row[1] if column1 == \u0026#34;x\u0026#34; \u0026amp;\u0026amp; column2 == \u0026#34;y\u0026#34; { continue } var rowData data rowData.x, _ = strconv.ParseFloat(column1, 64) rowData.y, _ = strconv.ParseFloat(column2, 64) Rowsdata = append(Rowsdata, rowData) } return Rowsdata } func main() { var total_AUC float64 = 0.0 filepath := \u0026#34;AUC_data.xlsx\u0026#34; raw_data := loadXLXSdata(filepath) fmt.Printf(\u0026#34;[+] Loaded data from %s with no header\\n\u0026#34;, filepath) fmt.Printf(\u0026#34;[+] Data rows : %d\\n\u0026#34;, len(raw_data)) if len(raw_data)%2 == 0 { fmt.Printf(\u0026#34;[+] Calculable rows : %d\\n\u0026#34;, len(raw_data)) } else { fmt.Printf(\u0026#34;[+] Calculable rows : %d\\n\u0026#34;, len(raw_data)-1) } for index, data := range raw_data { x := data.x y := data.y next_index := index + 1 if (next_index + 1) \u0026gt; len(raw_data) { break } next_x := raw_data[next_index].x next_y := raw_data[next_index].y auc := (y + next_y) * (next_x - x) / 2 total_AUC += auc } fmt.Printf(\u0026#34;[+] The area under curve using trapezoidal rule is : %f\\n\u0026#34;, total_AUC) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 from typing import Generator try: import openpyxl except ImportError: print(f\u0026#34;[+] openpyxl module is not found on this machine\u0026#34;) print(f\u0026#34;[+] We got you. Installing openpyxl...\u0026#34;) import subprocess import sys subprocess.check_call([sys.executable, \u0026#34;-m\u0026#34;, \u0026#34;pip\u0026#34;, \u0026#34;install\u0026#34;, \u0026#34;openpyxl\u0026#34;]) import openpyxl print(f\u0026#34;[+] openpyxl module was installed and imported\u0026#34;) def load_xlsx_data(filepath : str) -\u0026gt; Generator: wb_obj = openpyxl.load_workbook(filepath) sheet = wb_obj.active for row in sheet.iter_rows(values_only=True): column_1 = row[0] column_2 = row[1] if column_1 == \u0026#34;x\u0026#34; and column_2 == \u0026#34;y\u0026#34;: continue x = column_1 y = column_2 yield (float(x), float(y)) def main(): try: filepath = \u0026#34;AUC_data.xlsx\u0026#34; except FileNotFoundError: print(\u0026#34;[+] Make sure to have the data file in the same directory (folder) as the program.\u0026#34;) import sys sys.exit(1) data = list(load_xlsx_data(filepath = filepath)) print(f\u0026#34;[+] Loaded data from {filepath} with no header\u0026#34;) print(f\u0026#34;[+] Data rows : {len(data)}\u0026#34;) print(f\u0026#34;[+] Calculable rows : {len(data) if len(data) % 2 == 0 else len(data) - 1}\u0026#34;) total_AUC = 0 for index, value in enumerate(data): x = value[0] y = value[1] # Get the next x and y value if IndexError was thrown, it means the current value is the last value of data then break out of loop try: next_x = data[index + 1][0] next_y = data[index + 1][1] except IndexError: break # break out of loop auc = (y + next_y) * (next_x - x) / 2 total_AUC += auc print(f\u0026#34;[+] The area under curve using trapezoidal rule is : {total_AUC}\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() Output [+] Loaded data from AUC_data.xlsx with no header\n[+] Data rows : 351\n[+] Calculable rows : 350\n[+] The area under curve using trapezoidal rule is : 0.330154 ","description":"Write a program to calcuate the area under curve using trapezoidal rule from given a data in spreadsheet xlxs format.","id":5,"section":"posts","tags":null,"title":"Write a Program to Calculate Area Under Curve Using Trapezoidal Rule","uri":"https://touexe.com/posts/write-a-program-to-calculate-area-under-curve-using-trapezoidal-rule/"},{"content":"Introduction 🔥 របៀបដំឡើង Visual Studio Code ប្រើប្រាស់ ជាមួយភាសា C និង ភាសា C\u0026#43;\u0026#43;: Visual Studio Code ឫក៏ហៅកាត់ថា VS Code គឺជាកម្មវិធីសរសេរកូដឥតគិតថ្លៃដែលបង្កើតឡើងដោយ ក្រុមហ៊ុន Microsoft សម្រាប់ដំណើរការនៅលើប្រព័ន្ធប្រតិបត្តិការ Windows, Linux macOS ។ លក្ខណៈពិសេស Visual Studio Code រួមមានការដាស់តឿនកែកំហុសកូដ មុខងារជួយបំពេញកូដ និងមាន Extension យ៉ាងច្រើនសម្រាប់ជួយក្នុងការសរសេរនិងកែលម្អកម្មវីធីឲ្យងាយស្រួលនិងរហ័ស ។ ក្នុងអត្ថបទនេះយើងនឹងលើកយកពីវិធីដំឡើង Visual Studio Code និងកម្មវិធីផ្សេងៗទៀតមកជាជំនួយ ព្រមទាំងការដំឡើងឲ្យប្រើប្រាស់សម្រាប់សរសេរភាសា C និង C++ នៅលើប្រព័ន្ធប្រតិបត្តិការ Windows ។\nរបៀបដំឡើងកម្មវិធី Visual Studio Code 🛠 ដើម្បីដំឡើង Visual Studio Code យើងអាចដំឡើងដោយ Download កម្មវីធីដំឡើងនៅក្នុង Website ផ្លូវការ ឫក៏ដំឡើងដោយ Download តាមរយៈ Microsoft Store ។\nរបៀប 1 : ដំឡើងតាមរយៈ Website ផ្លូវការ ជាដំបូងយើងចូលទៅកាន់ https://code.visualstudio.com/download ។ រួចលើប៊ូតុងក្នុងបន្ទាត់ក្រហម ហើយយើងនឹងរង់ចាំរហូតដល់វា Download ចប់ ។\nDownload Visual Studio code: https://code.visualstudio.com/download រងចាំដំណើរការ Download: VSCodeUserSetup.exe បន្ទាប់ពី Download រូចរាល់អស់ហើយ សូមបើកកម្មវិធីដំឡើង ហើយយើងនឹងឃើញផ្ទាំងមួយលោតមកតម្រូវឲ្យយើងចុច I agree the agreement រូចចុច Next ។\nចុច I agree the agreement រូចចុច Next: បន្ទាប់មកយើងនឹងឃើញផ្ទាំងមួយទៀតដែលជាកន្លែងសម្រាប់ផ្ទុកកម្មវិធីនិងទ័ន្នន័យផ្សេងៗរបស់ Visual Studio Code ។ បើសិនជាចង់ផ្ដូរទីតាំងដែលចង់ផ្ទុកកម្មវិធីនិងទ័ន្នន័យទាំងនោះយើងអាចចុច Browse ដើម្បីជ្រើសរើសទីតាំងដែលចង់ផ្ទុក ឫក៏មិនបាច់ក៏បាន ។ ហើយយើងអាចចុច Next ដើម្បីបន្ត ។\nជ្រើសរើសទីតាំងសម្រាប់ផ្ទុកកម្មវិធីនិងទ័ន្នន័យរបស់ VS code ឫក៏មិនបាច់ក៏បាន ហើយចុច Next: ត្រង់ផ្ទាំងនេះយើងអាចចុច Next បាន ។\nចុច Next: មកដល់ផ្ទាំងនេះតម្រូវឲ្យចុចប្រអប់ទាំងអស់ដូចក្នុងរូបខាងក្រោម ។\n: ចុចប្រអប់ទាំងអស់ដូចក្នុងរូប: ជាចុងក្រោយសូមចុចប៊ូតុង Install ហើយរងចាំដល់់វារូចរាល់ ។\nចុចប៊ូតុង Install ហើយរងចាំ: ការដំឡើងរួចរាល់: របៀប 2 : ដំឡើងតាមរយៈ Microsoft Store ដំបូងសូមចូលទៅកាន់កម្មវិធី Microsoft Store រួច Search ពាក្យថា \u0026quot; Visual Studio Code \u0026ldquo; បន្ទាប់មកយើងនឹងឃើញផ្ទាំងមួយលោតមកដែលមានឈ្មោះកម្មវិធី Visual Studio Code ព្រមទាំងប៊ូតុង Install ។ សូមចុចប៊ូតុង Install ជាការស្រេច ។\nSearch Visual Studio Code : របៀបដំឡើង Visual Studio Code Extension 🚀 ដើម្បីសម្រួលដល់ការសរសេរកូដ និងការងារផ្សេងៗយើង Extension ដើម្បីជាជំនួយ ។\nរបៀប 1 : ដំឡើង Extension តាមរយៈ Visual Studio Code Market ដើម្បីចូលដំឡើង Extension បានយើងត្រូវចុចប៊ូតុងមានរូបប្រអប់ 4 ឬក៏ប្រើ key Ctrl + Shift + X ។\nVisual Studio code Extension Market: Ctrl \u0026#43; Shift \u0026#43; X ក្នុងករណីនេះដើម្បីសម្រួលដល់ការ Run កូដភាសា C និងភាសា C++ យើងអាចដំឡើង Extension មួយចំនួនដោយស្វែងរកឈ្មោះ Extension ដូចជា :\nCode Runner C/C++ Extension Pack រួចចុចប៊ូតុង Install តាម Extension នីមួយៗ ។\nCode Runner Extension: Click install C/C\u0026#43;\u0026#43; Extension Pack: Click install របៀប 2 : ដំឡើង Extension តាមរយៈ Command Line វិធីដំឡើង Extension តាមរយៈ Command Line ជាដំបូងយើងត្រូវចូលក្នុង Command Line ដោយប្រើ Key Win + R រូចវាយបញ្ចូល cmd ហើយ Enter ។\nបន្ទាប់មកវាយ Command ដូចខាងក្រោមរូច Enter :\n1 code --install-extension formulahendry.code-runner Code Runner Extension: code --install-extension formulahendry.code-runner រួចរងចាំដល់វាដំណើររួចរាល់ហើយបន្តមកវាយ Command ដូចខាងក្រោមរូច Enter :\n1 code --install-extension ms-vscode.cpptools-extension-pack C/C\u0026#43;\u0026#43; Extension Pack: code --install-extension ms-vscode.cpptools-extension-pack របៀបដំឡើងកម្មវិធី MingW 🔧 បន្ទាប់ពីដំឡើង Visual Studio Code និង Extension មួយចំនួនរបស់វាហើយហើយត្រូវការកម្មវិធី gcc និង gdb ដើម្បីឲ្យការ Run ភាសា C ដំណើរការផ្ទាល់ជាមួយ Visual Studio Code ។ កម្មវិធី gcc និង gdb ទាំងដំឡើងមកបានដោយការប្រើប្រាស់កម្មវិធី Mingw ។\nជាដំបូងយើងចូលទៅកាន់ https://sourceforge.net/projects/mingw ហើយចុចប៊ូតុង Download ។\nMingw: ចុច Download បន្ទាប់ពី Download រូចរាល់អស់ហើយ សូមបើកកម្មវិធីដំឡើង រួចមកបន្ទាប់ពីដំឡើងកម្មវិធី Mingw ហើយយើងនឹងឃើញផ្ទាំង MinGW installation manager លោតមក ។ ហើយសូម Click ប្រអប់តាមជួរដែលមានឈ្មោះខាងក្រោម :\nmingw-developer-tool mingw32-base mingw32-gcc-g++ msys-base ជ្រើសរើសតែ 4 ប៉ុណ្ណោះ: បន្ទាប់ពី Click ប្រអប់ខាងលើគ្រប់ហើយយើងចុច Installation នៅចុងខាងលើឆៀងឆ្វេង ហើយចុច Apply Changes\nInstallation \u0026gt; Apply Changes: ជាចុងក្រោយយើងត្រូវដាក់ទីតាំងដែលកម្មវិធី gcc និង gdb នៅក្នុងចូលទៅ Environment variables ដែលវានៅក្នុង C:\\MinGW\\bin ។\nដូច្នេះចូលទៅ Windwos Search Bar ហើយវាយ \u0026rdquo; Environment \u0026ldquo; យើងនឹងឃើញ Edit the system environment variables ។\nSearch Environment Variables: Edit the system environment variables ចុចលើ Path ( ដូចនៅក្នុងបន្ទាត់ក្រហម ) ហើយចុចប៊ូតុង Edit ។\nចុចលើ Path ហើយចុច Edit: ចុចលើប៊ូតុង New ហើយវាយបញ្ចូល C:\\MinGW\\bin បន្ទាប់ចុចប៊ូតុង OK ជាការស្រេច ។\nចុចលើ New ហើយវាយបញ្ចូល C:\\MinGW\\bin: Congratualation 🎉 ជាចុងបញ្ចប់យើងបានដំឡើងកម្មវិធី Visual Studio Code និង Extension របស់វាព្រមទាំងកម្មវិធី gcc និង gdb ដើម្បីការសរសេរនិងដំណើរការភាសា C ៕\n","description":"Introduction 🔥 របៀបដំឡើងកម្មវិធី Visual Studio Code 🛠 របៀបដំឡើង Visual Studio Code Extension 🚀 របៀបដំឡើងកម្មវិធី MingW 🔧","id":6,"section":"posts","tags":null,"title":"របៀបដំឡើង Visual Studio Code ប្រើប្រាស់ ជាមួយភាសា C និង ភាសា C++","uri":"https://touexe.com/posts/how-to-setup-vscode-for-c-and-cpp-programming-language/"},{"content":"Exercises 3.3 Exercise 3.3: 1 2 3 4 Exercises 3.4 Exercise 3.4: 1 2 Exercises 3.4 - Technical Computing Using a technical computing language draw y = sin x\nand y = cos x for 0 6 x 6 4π on the same axes. Use\nyour graphs to find approximate solutions to the\nequation sin x = cos x.\nExercise 3.4 Technical Computing: 1 Draw the graphs of y = cos −1 x and y = tan −1 x.\nExercise 3.4 Technical Computing: 2 Exercises 3.6 Exercise 3.6: 1 Exercise 3.6: 2 4 Exercise 3.6: 4 5 Exercises 3.8 Exercise 3.8: 1 2 Exercise 3.8: 3 4 ","description":"The Trigonometric Functions - Exercises and Answers","id":7,"section":"homeworks","tags":null,"title":"Chapter 3 : The Trigonometric Functions - Exercises and Answers","uri":"https://touexe.com/homeworks/chapter-3-exercise-and-answers/"},{"content":"Hi? Well Nothing much. I just like Security? YEH DAMN RIGHT. And Welcome to my world.\nSocial Links Telegram\n","description":"","id":8,"section":"","tags":null,"title":"About","uri":"https://touexe.com/about/"},{"content":"7 segment display ជាអ្វី ? 7 Segment display គឺជាគ្រឿងអេឡិចត្រូនិចដែលមានមុខងារបង្ហាញជាលេខឫអក្សរ ។\n“ 7 Segment ” អាចបកប្រែមកជាភាសាខ្មែរថា “ ប្រាំពីរកំណាត់ ” ។ វាបង្កើតឡើងដោយបង្គុំអំពូលភ្លើង LED ផ្គុំគ្នាចេញជា 7 កំណាត់ កំណាត់នីមួយៗអាចតាងជាអក្សរ A, B, C, D, E, F, G ។\n7 segment display labels: 7 Segment display អាចបង្ហាញលេខចំនួន 10លេខ ចាប់ពីលេខ 0 ដល់លេខ 9 និងអក្សរចំនូន 6 ចាប់ពី A ដល់ F ដោយមានបង្គុំអំពូល LED នៅកំណាត់ណាមួយ បេីក ឫ បិទ ( មានភ្លើង ឫ អត់ភ្លើង ) ។ Ex : ដើម្បីបង្ហាញលេខ 9 កំណាត់ E ត្រូវបិទរីឯកំណាត់ផ្សេងៗត្រូវភ្លឺទាំងអស់ ។ វាអាចបង្ហាញលេខអក្សរមួយចំនួនដែលបានរៀបរាប់ខាងលើតែប៉ុណ្ណោះទេ វាមិនបង្ហាញអក្សរផ្សេងៗឫសញ្ញាផ្សេងៗទៀតបានឡើយ តែអាចធ្វើបានដោយទ្រឺស្ដីផ្សេង :\nEight segment display Nine segment display Fourteen segment display Sixteen segment display Dot matrix display 7-Segment display number formation: 7 Segment display ត្រូវបានគេប្រើប្រាស់ក្នុងរបស់ប្រើប្រាស់ប្រចាំថ្ងៃដូចជាភ្លើងស្តុប នាឡិកាអេឡិចត្រូនិកម៉ាសុីនបោកខោអាវ ម៉ាស៊ីនគិតលេខ កុងទ័រល្បឿនម៉ូតូ ។\n7 Segment display ដំណេីរការដូចម្ដេច ? បន្ទាប់ពីបានស្គាល់ 7 Segment display ជាអ្វី មុខងារខ្លះៗរបស់វាហើយយើងអាចបន្តទៅស្គាល់នូវមុខងារបន្ថែមនិងដំណើរការរបស់វា។ ដូចការរៀបរាប់និងឧទាហរណ៍ដែលបានលើកឡើងខាងលើ ដើម្បបង្ហាញរូបរាងជាលេខឫអក្សរជាក់លាក់មួយបាន កំណាត់នីមួយៗតម្រូវឲ្យបើកឫបិទតាមការកំណត់របស់វា។\n7 segment display ត្រូវការ Input ជាលេខ Binary មានទម្រង់ចំនួន 4 ខ្ទង់ ( 4-bit Binary ) ដោយខ្ទង់នីមួយៗតាងដោយអក្សរ A B C D ដើម្បីបង្ហាញលេខពី ០ ដល់ 9 ។\nការប្រើប្រាស់ Truth Table ដើម្បីឲ្យងាយស្រួលមើលនិងយល់ពី Logic ការបិទបើករបស់កំណាត់នីមួយៗពីលេខ 0 ទៅ 9 យើងអាចប្រើតារាងភាពពិត ( Truth Table ) មកមើលជាជំនួយ ។\nTruth Table: ក្នុងជួរឈរ ( Column ) Decimal Digits គឺជាលេខដែល 7 segment display អាចបង្ហាញ Output ជាលេខប្រព័ន្ធគោលដប់ ក្នុងជួរឈរ ( Column ) Input Lines ដែលចែកចេញជាជួរតូចៗរបស់វាចំនួន 4 ( A, B, C, D ) ទៀតគឺជាលេខប្រព័ន្ធគោលពីរ ដែលមាន 0 និង 1 ដើរតួជា Input ។ ០ តំណាងឲ្យ គ្មានភ្លើង ចំណែកឯ 1 តាងឲ្យមានភ្លើង ក្នុងជួរឈរ ( Column ) output Lines ដែលចែកចេញជាជួរតូចៗរបស់វាចំនួន 7 ( a, b, c, d, e, f, g ) ទៀតគឺជាលេខប្រព័ន្ធគោលពីរ ដែលមាន 0 និង 1 ដើរតួជា output ។ ០ តំណាងឲ្យ គ្មានភ្លើងឫមិនភ្លឺ ចំណែកឯ 1 តាងឲ្យមានភ្លើងឫមិនភ្លឺនៅកំណាត់ណាមួយ ឧទាហរណ៍ : ក្នុងប្រឡោះ ( Cell ) នៅជួរឈរ ( Column ) a និង ជួរដេក ( row ) 0 មានតម្លៃស្មើរនឹង 1 នោះកំណាត់ a ទទួលភ្លើងឫភ្លឺ ដើម្បីបង្ហាញបានជាលេខ ០ ដូច្នេះនៅកំណាត់នីមួយៗចាប់ពីលេខ 0 ដល់ 9 អាចសរសេរជាសមីការ Boolean Expression បាន :\na = A’B’C’D’ + A’B’CD’ + A’BC’D + A’BCD + AB’C’D’ + AB’C’D b = A’B’C’D’ + A’B’C’D + A’B’CD’ + A’B’CD + A’BC’D’ + A’BCD + AB’C’D’ + AB’C’D c = A’B’C’D’ + A’B’C’D + A’B’CD + A’BC’D’ + A’BC’D + A’BCD’ + A’BCD + AB’C’D’ d = A’B’C’D’ + A’B’CD’ + A’B’CD + A’BC’D + A’BCD’ + AB’C’D’ + AB’C’D e = A’B’C’D’ + A’B’CD’ + A’BCD’ + AB’C’D’ f = A’B’C’D’ + A’BC’D’ + A’BC’D + A’BCD’ + AB’C’D’ + AB’C’D g = A’B’CD’ + A’B’CD + A’BC’D’ + A’BC’D + A’BCD’ + AB’C’D’ + AB’C’D Boolean expression table: សមីការទាំងនេះអាចបង្ហាញឲ្យយើងដឹងពីរបៀបសង់ Logic Gate របស់កំណាត់នីមួយៗ ក៏ប៉ុន្ដែសមីការទាំងនេះវែងពេកដែលតម្រូវឲ្យយើងសង់ Logic Gate ច្រើននិងស្មុកស្មាញដូច្នេះយើងអាចសម្រួលសមីការទាំងនេះបានដោយប្រើ Boolean algebra ឫក៏ K-Map ( Karnaugh Map ) មកសម្រួល ។ ក្នុងអត្ថបទនេះលើកយកតែ K-Map បកស្រាយតែប៉ុណ្ណោះ។\nការប្រើប្រាស់ K-Map kmap a b: kmap c d: kmap e f g: ឧទាហរណ៍ការប្រើប្រាស់ K-Map ជាមួយកំណាត់ a :\nយើងគូសតារាង 4 x 4 សរសេរ AB និង CD នៅផ្នែកខាងលើឆៀងខាងឆ្វេងតារាង រូចសរសេរ 00, 01, 11, 10 តាមលំដាប់ក្នុងជួរដេកខាងលើនិងជួរឈរខាងឆ្វេងតារាង ឲ្យស្មើរតាមជួរដេកខាងលើនិងជួរឈរ ប្រើទិន្នន័យក្នុងតារាងភាពពិត ( Truth Table ) មកបញ្ចូលក្នុងតារាង K-Map ដោយកំណាត់ a មានតែលេខ Output ប្រព័ន្ធគោលដប់ 1 និង 4 ប៉ុណ្ណោះមិនភ្លឺ ឫ មិនត្រូវការ ក្រៅពីនេះលេខ Output ប្រព័ន្ធគោលដប់ផ្សេងៗទៀតត្រូវការកំណាត់ a បំភ្លឺទាំងអស់ យើងមើលតម្លៃជួរដេកឈរនិងតម្លៃជួរដេក មកតម្រៀបតាងទម្រង់ ABCD ដែលវាត្រូវជាតម្លៃលេខ Binary មានទម្រង់ចំនួន 4 ខ្ទង់ ( 4-bit Binary ) របស់លេខ Output ប្រព័ន្ធគោលដប់នៅក្នុងតារាងភាពពិត ។ Ex : AB = 00 និង CD = 00 នាំឲ្យ ABCD = 0000 ដូច្នេះយើងបំពេញលេខ 1 ក្នុងប្រឡោះនោះ បើសិនជាតម្លៃលេខ Binary របស់លេខ Output ប្រព័ន្ធគោលដប់ត្រូវការកំណាត់ a ភ្លឺ ។ Ex : លេខ Output ប្រព័ន្ធគោលដប់លេខ Output ប្រព័ន្ធគោលដប់ ០ តម្រូវឲ្យកំណាត់ a កំណាត់ a ភ្លឺ និងមានតម្លៃ Binary វាគឺ 0000 នោះយើងបំពេញ 1 ក្នុងប្រឡោះនោះ រីឯតម្លៃលេខ Binary របស់លេខ Output ប្រព័ន្ធគោលដប់មិនត្រូវការកំណាត់ a ឲ្យភ្លឺ យើងបំពេញលេខ 0 ចំណែកប្រឡោះនៅសល់គឺជាប្រឡោះដែលមានតម្លៃលេខ Binary ដែលមិនមែនជារបស់លេខ Output ប្រព័ន្ធគោលដប់ 0 ដល់ 9 យើងបំពេញ X មានន័យថាយើងមិនខ្វល់ពីវា ។ Ex : 1111 ជាតម្លៃលេខ Binary របស់លេខ 15 មិនមែនជាប្រព័ន្ធគោលដប់អាចបង្ហាញក្នុង 7 segment display បានឡើយ សមីការក្រោមពីការសម្រួលដោយប្រើ K-map ដែលខ្លីងាយស្រួលក្នុងការសង់ Logic gate យើងបាន :\nA = A + C+ BD + B’D’ B = B’+ C’D’+ CD C = B+D+C’ D = A + B’D’ + B’C+ CD’ + BC’D E = B’D’ + CD’ F = A + BC’ + BD’ ‘+ C’D’ G = A + BC’ + B’C + BD’ Simulation នៃ 7 segment display ក្នុង Proteus 7 segment in proteus: Youtube explaination video Credit Author : Vitou Hak Instructor : Prof. Thap Tharoeun ","description":"7 segment display ជាអ្វី ? 7-Segment display ដំណេីរការដូចម្ដេច ?","id":9,"section":"posts","tags":null,"title":"7 segment display : Introduction  \u0026 Simulation ","uri":"https://touexe.com/posts/7-segments-introduction-and-simulation/"}]